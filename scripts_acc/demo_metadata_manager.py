#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√©monstration du metadata_manager.py

Ce script montre comment utiliser le gestionnaire de m√©tadonn√©es
avec des exemples pratiques.

Auteur: Geoffroy Streit / Hylst
Date: 2024
"""

import os
import sys
import json
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer metadata_manager
sys.path.insert(0, str(Path(__file__).parent))

from metadata_manager import MetadataManager

def demo_extract():
    """D√©monstration de l'extraction de m√©tadonn√©es"""
    print("üîç D√©monstration: Extraction de m√©tadonn√©es")
    print("-" * 50)
    
    # Utiliser le r√©pertoire imgs existant
    imgs_dir = Path(__file__).parent.parent / "imgs"
    output_file = Path(__file__).parent / "extracted_metadata_demo.json"
    
    if not imgs_dir.exists():
        print(f"‚ùå R√©pertoire d'images non trouv√©: {imgs_dir}")
        return False
    
    # Cr√©er le gestionnaire et extraire
    manager = MetadataManager(verbose=True)
    success = manager.extract_metadata_from_directory(str(imgs_dir), str(output_file))
    
    if success:
        print(f"\n‚úÖ M√©tadonn√©es extraites dans: {output_file}")
        
        # Afficher un aper√ßu du contenu
        with open(output_file, 'r', encoding='utf-8') as f:
            metadata_list = json.load(f)
        
        print(f"\nüìä R√©sum√©: {len(metadata_list)} images trait√©es")
        
        if metadata_list:
            example = metadata_list[0]
            print(f"\nüìÑ Exemple d'extraction:")
            print(f"  Fichier: {example.get('Fichier', 'N/A')}")
            print(f"  Titre: {example.get('Titre', 'N/A')}")
            print(f"  Taille: {example.get('Taille', 'N/A')}")
            print(f"  Dimensions: {example.get('Largeur', 'N/A')}x{example.get('Hauteur', 'N/A')}")
            print(f"  Mots-cl√©s: {len(example.get('Mots cles', []))} mots-cl√©s")
            
            keywords = example.get('Mots cles', [])
            if keywords:
                print(f"    Exemples: {', '.join(keywords[:5])}{'...' if len(keywords) > 5 else ''}")
        
        return True
    else:
        print("‚ùå √âchec de l'extraction")
        return False

def demo_apply():
    """D√©monstration de l'application de m√©tadonn√©es"""
    print("\n\nüìù D√©monstration: Application de m√©tadonn√©es")
    print("-" * 50)
    
    # V√©rifier si le fichier d'extraction existe
    metadata_file = Path(__file__).parent / "extracted_metadata_demo.json"
    
    if not metadata_file.exists():
        print(f"‚ùå Fichier de m√©tadonn√©es non trouv√©: {metadata_file}")
        print("   Ex√©cutez d'abord la d√©monstration d'extraction.")
        return False
    
    # Cr√©er des m√©tadonn√©es de test modifi√©es
    with open(metadata_file, 'r', encoding='utf-8') as f:
        original_metadata = json.load(f)
    
    if not original_metadata:
        print("‚ùå Aucune m√©tadonn√©e trouv√©e dans le fichier")
        return False
    
    # Modifier les m√©tadonn√©es pour la d√©monstration
    demo_metadata = original_metadata[:3]  # Prendre seulement 3 images
    
    for i, metadata in enumerate(demo_metadata):
        metadata['Titre'] = f"[DEMO] {metadata.get('Titre', 'Sans titre')} - Modifi√©"
        metadata['Description'] = f"Description modifi√©e par la d√©monstration. {metadata.get('Description', '')}"
        metadata['Mots cles'] = ["demo", "test", "metadata"] + metadata.get('Mots cles', [])[:5]
        metadata['Caracteristiques'] = metadata['Mots cles'].copy()
        metadata['Createur'] = "Demo Creator / Test"
        metadata['Perception'] = "Perception artistique ajout√©e par la d√©monstration."
        metadata['Conte'] = "Histoire cr√©√©e pour la d√©monstration du gestionnaire de m√©tadonn√©es."
    
    # Sauvegarder les m√©tadonn√©es modifi√©es
    demo_file = Path(__file__).parent / "demo_metadata.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(demo_metadata, f, ensure_ascii=False, indent=2)
    
    print(f"üìÑ M√©tadonn√©es de d√©monstration cr√©√©es: {demo_file}")
    print(f"üìä {len(demo_metadata)} images seront modifi√©es")
    
    # Afficher les modifications qui seront appliqu√©es
    print("\nüîß Modifications qui seront appliqu√©es:")
    for metadata in demo_metadata:
        print(f"  ‚Ä¢ {metadata['Fichier']}:")
        print(f"    Titre: {metadata['Titre']}")
        print(f"    Mots-cl√©s: {', '.join(metadata['Mots cles'][:3])}...")
    
    # Demander confirmation
    response = input("\n‚ùì Voulez-vous appliquer ces m√©tadonn√©es aux images ? (o/N): ")
    
    if response.lower() not in ['o', 'oui', 'y', 'yes']:
        print("‚èπÔ∏è Application annul√©e par l'utilisateur")
        return True
    
    # Appliquer les m√©tadonn√©es
    imgs_dir = Path(__file__).parent.parent / "imgs"
    manager = MetadataManager(verbose=True)
    success = manager.apply_metadata_from_json(str(demo_file), str(imgs_dir))
    
    if success:
        print("\n‚úÖ M√©tadonn√©es appliqu√©es avec succ√®s!")
        print("\nüîç V√©rification des modifications:")
        
        # V√©rifier quelques images
        for metadata in demo_metadata[:2]:  # V√©rifier 2 images
            filename = metadata['Fichier']
            image_path = imgs_dir / filename
            
            if image_path.exists():
                try:
                    import pyexiv2
                    with pyexiv2.Image(str(image_path)) as img:
                        xmp_data = img.read_xmp()
                        title = xmp_data.get('Xmp.dc.title', {})
                        
                        if isinstance(title, dict) and 'lang="x-default"' in title:
                            actual_title = title['lang="x-default"']
                        elif isinstance(title, str):
                            actual_title = title
                        else:
                            actual_title = "Titre non trouv√©"
                        
                        print(f"  ‚úÖ {filename}: {actual_title}")
                        
                except Exception as e:
                    print(f"  ‚ö†Ô∏è {filename}: Erreur de v√©rification - {str(e)}")
            else:
                print(f"  ‚ùå {filename}: Fichier non trouv√©")
        
        return True
    else:
        print("‚ùå √âchec de l'application des m√©tadonn√©es")
        return False

def demo_usage():
    """Affiche les exemples d'utilisation en ligne de commande"""
    print("\n\nüìö Utilisation en ligne de commande")
    print("-" * 50)
    
    print("Le script metadata_manager.py peut √™tre utilis√© directement:")
    print()
    print("üîç Extraction de m√©tadonn√©es:")
    print("  python scripts_acc/metadata_manager.py extract ./imgs metadata.json")
    print("  python scripts_acc/metadata_manager.py extract ./imgs metadata.json --verbose")
    print()
    print("üìù Application de m√©tadonn√©es:")
    print("  python scripts_acc/metadata_manager.py apply metadata.json ./imgs")
    print("  python scripts_acc/metadata_manager.py apply metadata.json ./imgs --verbose")
    print()
    print("üìÑ Aide:")
    print("  python scripts_acc/metadata_manager.py --help")
    print()
    print("üí° Conseils:")
    print("  ‚Ä¢ Utilisez --verbose pour voir les d√©tails du traitement")
    print("  ‚Ä¢ Sauvegardez vos images avant d'appliquer des m√©tadonn√©es")
    print("  ‚Ä¢ Le format JSON doit correspondre √† la structure g√©n√©r√©e par l'extraction")

def main():
    """Fonction principale de d√©monstration"""
    print("üéØ D√©monstration du Gestionnaire de M√©tadonn√©es")
    print("=" * 60)
    
    print("\nCe script d√©montre les capacit√©s du metadata_manager.py:")
    print("1. Extraction de m√©tadonn√©es d'images vers JSON")
    print("2. Application de m√©tadonn√©es JSON vers images")
    print("3. Utilisation en ligne de commande")
    
    # D√©monstration d'extraction
    extract_success = demo_extract()
    
    if extract_success:
        # D√©monstration d'application
        demo_apply()
    
    # Afficher les exemples d'utilisation
    demo_usage()
    
    print("\n" + "=" * 60)
    print("üéâ D√©monstration termin√©e!")
    print("\nFichiers cr√©√©s:")
    
    files_created = [
        "extracted_metadata_demo.json",
        "demo_metadata.json"
    ]
    
    for filename in files_created:
        filepath = Path(__file__).parent / filename
        if filepath.exists():
            print(f"  ‚úÖ {filename} ({filepath.stat().st_size} bytes)")
        else:
            print(f"  ‚ùå {filename} (non cr√©√©)")

if __name__ == "__main__":
    main()