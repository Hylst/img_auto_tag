"""
extract_meta_utf8.py

Ce script Python utilise l'outil ExifTool pour extraire les m√©tadonn√©es EXIF, IPTC et XMP
des fichiers image dans le r√©pertoire courant et les exporte dans un fichier JSON.
Il offre √©galement des fonctionnalit√©s pour nettoyer et modifier les m√©tadonn√©es en lot.

Pr√©requis:
  - ExifTool doit √™tre install√© et accessible via le PATH de votre syst√®me.
    T√©l√©chargez-le ici: https://exiftool.org/

Utilisation:
  1. Placez ce script dans le m√™me r√©pertoire que vos fichiers image.
  2. Ex√©cutez le script depuis votre terminal:
     `python extract_meta_utf8.py`
  3. Utilisez le menu interactif pour choisir l'action d√©sir√©e.

Fonctionnalit√©s:
  - Extraction des m√©tadonn√©es vers JSON
  - Nettoyage en lot des m√©tadonn√©es sp√©cifiques
  - √âcriture d'informations d'auteur personnalis√©es

Champs extraits:
  - Nom du fichier, Taille, Type MIME, Largeur, Hauteur
  - Cat√©gorie, Cat√©gorie secondaire, Cr√©ateur, Description, Mots-cl√©s, Titre
  - Caract√©ristiques hi√©rarchiques, Instructions (Perception), Instructions sp√©ciales (Conte)

Gestion des erreurs:
  - Affiche un message si aucun fichier image n'est d√©tect√©.
  - G√®re l'erreur si ExifTool n'est pas trouv√©.
  - G√®re les erreurs d'ex√©cution d'ExifTool.
"""
import os
import json
import subprocess

# Extensions d'image support√©es par le script
EXTENSIONS = {'.jpg', '.jpeg', '.png', '.tif', '.tiff', '.webp'}

def get_image_files():
    """
    R√©cup√®re la liste des fichiers image dans le r√©pertoire courant.
    
    Returns:
        list: Liste des noms de fichiers image trouv√©s
    """
    # os.listdir('.') liste tous les fichiers et dossiers dans le r√©pertoire actuel.
    # os.path.splitext(f) divise le nom de fichier en nom de base et extension.
    # [1].lower() prend l'extension et la convertit en minuscules pour une comparaison insensible √† la casse.
    return [f for f in os.listdir('.') if os.path.splitext(f)[1].lower() in EXTENSIONS]

def debug_metadata_fields():
    """
    Fonction de d√©bogage pour afficher tous les champs de m√©tadonn√©es disponibles.
    Utile pour identifier les noms exacts des champs retourn√©s par ExifTool.
    """
    print("\n=== D√âBOGAGE DES CHAMPS DE M√âTADONN√âES ===")
    
    files = get_image_files()
    if not files:
        print("Aucun fichier JPG ou PNG trouv√©.")
        return
    
    # Prend le premier fichier pour le test
    test_file = files[0]
    print(f"Test avec le fichier : {test_file}")
    
    cmd = [
        'exiftool',
        '-charset', 'filename=utf8',
        '-charset', 'exiftool=utf8',
        '-j',
        test_file
    ]
    
    try:
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="utf-8", check=True)
        raw_json = json.loads(result.stdout)
        
        if raw_json:
            print("\nTous les champs disponibles :")
            for key in sorted(raw_json[0].keys()):
                value = raw_json[0][key]
                if isinstance(value, str) and len(value) > 50:
                    value = value[:50] + "..."
                print(f"  {key}: {value}")
    except Exception as e:
        print(f"Erreur lors du d√©bogage : {e}")

def extract_metadata():
    """
    Extrait les m√©tadonn√©es des fichiers image et les exporte vers un fichier JSON.
    
    Cette fonction utilise ExifTool pour extraire les m√©tadonn√©es EXIF, IPTC et XMP
    des fichiers image dans le r√©pertoire courant et les sauvegarde dans un format JSON personnalis√©.
    """
    print("\nüîç Extraction des m√©tadonn√©es en cours...")
    
    # R√©cup√®re la liste des fichiers image
    files = get_image_files()
    
    # V√©rifie si des fichiers image ont √©t√© trouv√©s
    if not files:
        print("‚ùå Aucun fichier image d√©tect√© dans le r√©pertoire courant avec les extensions support√©es.")
        return
    
    print(f"üìÅ {len(files)} fichier(s) image d√©tect√©(s): {', '.join(files)}")
    
    # Construit la commande ExifTool avec les options et les champs √† extraire.
    # '-charset filename=utf8' et '-charset exiftool=utf8' assurent la gestion correcte de l'UTF-8.
    # '-j' sp√©cifie la sortie au format JSON.
    # Les champs list√©s sont ceux qui seront extraits des m√©tadonn√©es des images.
    # CORRECTION: Utilisation des noms de champs corrects bas√©s sur l'analyse ExifTool
    cmd = [
        'exiftool',
        '-charset', 'filename=utf8',
        '-charset', 'exiftool=utf8',
        '-j',
        '-FileName',
        '-FileSize',
        '-MIMEType',
        '-ExifImageWidth',
        '-ExifImageHeight',
        '-Category',  # IPTC Category
        '-SupplementalCategories',  # IPTC SupplementalCategories
        '-Artist',  # IFD0 Artist
        '-Description',  # XMP-dc Description
        '-Subject',  # XMP-dc Subject
        '-Title',  # XMP-dc Title
        '-Keywords',  # IPTC Keywords
        '-Instructions',  # XMP-photoshop Instructions
        '-Caption-Abstract'  # IPTC Caption-Abstract
    ] + files # Ajoute les noms des fichiers image √† la commande
    
    # Ex√©cution de la commande ExifTool
    try:
        # subprocess.run ex√©cute la commande externe.
        # stdout=subprocess.PIPE capture la sortie standard.
        # stderr=subprocess.PIPE capture la sortie d'erreur.
        # encoding="utf-8" sp√©cifie l'encodage pour la sortie.
        # check=True l√®ve une CalledProcessError si la commande retourne un code d'erreur non nul.
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="utf-8", check=True)
        # Charge la sortie JSON brute d'ExifTool.
        raw_json = json.loads(result.stdout)
        
        # Traite les donn√©es JSON brutes pour cr√©er un format personnalis√©.
        # CORRECTION: Les noms des champs doivent correspondre exactement aux noms retourn√©s par ExifTool
        custom_json = []
        for item in raw_json:
            custom_json.append({
                "Fichier": item.get("SourceFile", ""), # Nom du fichier source
                "Taille": item.get("FileSize", ""), # Taille du fichier
                "Type": item.get("MIMEType", ""), # Type MIME de l'image
                "Largeur": item.get("ExifImageWidth", ""), # Largeur de l'image en pixels
                "Hauteur": item.get("ExifImageHeight", ""), # Hauteur de l'image en pixels
                # CORRECTION: Utilisation des noms exacts retourn√©s par ExifTool
                "Categorie": item.get("Category", ""), # Cat√©gorie IPTC
                "Categorie secondaire": item.get("SupplementalCategories", ""), # Cat√©gories suppl√©mentaires IPTC
                "Createur": item.get("Artist", ""), # Cr√©ateur (Artist field)
                "Description": item.get("Description", ""), # Description XMP/IPTC
                "Mots cles": item.get("Subject", []), # Mots-cl√©s XMP (peut √™tre une liste)
                "Titre": item.get("Title", ""), # Titre XMP
                "Caracteristiques": item.get("Keywords", []), # Mots-cl√©s IPTC (liste)
                "Perception": item.get("Instructions", ""), # Instructions IPTC
                "Conte": item.get("Caption-Abstract", "") # L√©gende/R√©sum√© IPTC
            })
        
        # √âcrit les donn√©es JSON personnalis√©es dans un fichier.
        # "w" pour l'√©criture, encoding="utf-8" pour supporter les caract√®res sp√©ciaux.
        # ensure_ascii=False permet d'√©crire des caract√®res non-ASCII directement.
        # indent=2 formate le JSON avec une indentation de 2 espaces pour la lisibilit√©.
        with open("export_meta_utf8.json", "w", encoding="utf-8") as f:
            json.dump(custom_json, f, ensure_ascii=False, indent=2)
        print("‚úÖ export_meta_utf8.json cr√©√© avec succ√®s.")
        
    # Gestion des erreurs sp√©cifiques
    except FileNotFoundError:
        print("‚ùå Erreur : exiftool n'est pas install√© ou n'est pas dans le PATH. Veuillez l'installer et v√©rifier votre configuration.")
    except subprocess.CalledProcessError as e:
        # Affiche l'erreur standard d'ExifTool si la commande √©choue.
        print(f"‚ùå Erreur d'ex√©cution ExifTool :\n{e.stderr}")
    except json.JSONDecodeError:
        # G√®re les erreurs si la sortie d'ExifTool n'est pas un JSON valide.
        print("‚ùå Erreur : La sortie d'ExifTool n'est pas un JSON valide. Il peut y avoir un probl√®me avec les m√©tadonn√©es ou la commande.")
    except Exception as e:
        # Capture toute autre exception inattendue.
        print(f"‚ùå Une erreur inattendue s'est produite : {e}")

def clear_metadata_batch():
    """
    Efface en lot les m√©tadonn√©es sp√©cifi√©es pour tous les fichiers JPG et PNG du r√©pertoire courant.
    
    Cette fonction supprime les champs Creator, By-line, Artist, XP Author, XP Subject et Software
    de tous les fichiers image compatibles.
    """
    print("\nüßπ Nettoyage des m√©tadonn√©es en cours...")
    
    # R√©cup√®re uniquement les fichiers JPG et PNG
    files = [f for f in os.listdir('.') if os.path.splitext(f)[1].lower() in {'.jpg', '.jpeg', '.png'}]
    
    if not files:
        print("‚ùå Aucun fichier JPG ou PNG d√©tect√© dans le r√©pertoire courant.")
        return
    
    print(f"üìÅ {len(files)} fichier(s) √† traiter: {', '.join(files)}")
    
    # Champs √† effacer
    fields_to_clear = [
        "Creator",
        "By-line", 
        "Artist",
        "XPAuthor",  # Note: ExifTool utilise XPAuthor pour XP Author
        "XPSubject",
        "Software"
    ]
    
    for image_file in files:
        print(f"üîÑ Traitement de {image_file}...")
        try:
            # Construit la commande pour effacer les champs
            clear_command = ["exiftool"]
            for field in fields_to_clear:
                clear_command.extend([f"-{field}="])
            clear_command.append(image_file)
            clear_command.append("-overwrite_original")  # √âcrase le fichier original, ExifTool cr√©e une sauvegarde par d√©faut
            
            # Ex√©cute la commande de nettoyage
            subprocess.run(clear_command, check=True, capture_output=True, text=True)
            print(f"‚úÖ M√©tadonn√©es effac√©es pour {image_file}")
            
        except FileNotFoundError:
            print("‚ùå Erreur : ExifTool non trouv√©. Veuillez vous assurer qu'ExifTool est install√© et dans votre PATH syst√®me.")
            break
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors du traitement de {image_file}: {e}")
            if e.stdout:
                print(f"Sortie: {e.stdout}")
            if e.stderr:
                print(f"Erreur: {e.stderr}")
        except Exception as e:
            print(f"‚ùå Une erreur inattendue s'est produite: {e}")
    
    print("üèÅ Nettoyage des m√©tadonn√©es termin√©.")

def write_author_metadata():
    """
    √âcrit 'Geoffroy Streit / Hylst' dans les champs Artist et XP Author
    pour tous les fichiers JPG et PNG du r√©pertoire courant.
    
    Cette fonction ajoute les informations d'auteur sp√©cifi√©es aux m√©tadonn√©es des images.
    """
    print("\n‚úçÔ∏è √âcriture des informations d'auteur en cours...")
    
    # R√©cup√®re uniquement les fichiers JPG et PNG
    files = [f for f in os.listdir('.') if os.path.splitext(f)[1].lower() in {'.jpg', '.jpeg', '.png'}]
    
    if not files:
        print("‚ùå Aucun fichier JPG ou PNG d√©tect√© dans le r√©pertoire courant.")
        return
    
    print(f"üìÅ {len(files)} fichier(s) √† traiter: {', '.join(files)}")
    
    # Valeur √† √©crire
    author_value = "Geoffroy Streit / Hylst"
    
    # Champs √† remplir
    fields_to_write = [
        "Artist",
        "XPAuthor"
    ]
    
    for image_file in files:
        print(f"üîÑ Traitement de {image_file}...")
        try:
            # Construit la commande pour √©crire les champs
            write_command = ["exiftool"]
            for field in fields_to_write:
                write_command.extend([f"-{field}={author_value}"])
            write_command.append(image_file)
            write_command.append("-overwrite_original")  # √âcrase le fichier original, ExifTool cr√©e une sauvegarde par d√©faut
            
            # Ex√©cute la commande d'√©criture
            subprocess.run(write_command, check=True, capture_output=True, text=True)
            print(f"‚úÖ Informations d'auteur √©crites pour {image_file}")
            
        except FileNotFoundError:
            print("‚ùå Erreur : ExifTool non trouv√©. Veuillez vous assurer qu'ExifTool est install√© et dans votre PATH syst√®me.")
            break
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors du traitement de {image_file}: {e}")
            if e.stdout:
                print(f"Sortie: {e.stdout}")
            if e.stderr:
                print(f"Erreur: {e.stderr}")
        except Exception as e:
            print(f"‚ùå Une erreur inattendue s'est produite: {e}")
    
    print("üèÅ √âcriture des informations d'auteur termin√©e.")

def view_all_metadata():
    """
    Affiche toutes les m√©tadonn√©es disponibles pour un fichier image s√©lectionn√©.
    
    Cette fonction utilise ExifTool pour extraire et afficher tous les champs de m√©tadonn√©es
    disponibles avec un formatage lisible et support complet des accents fran√ßais.
    """
    print("\nüîç Visualisation compl√®te des m√©tadonn√©es...")
    
    # R√©cup√®re la liste des fichiers image
    files = get_image_files()
    
    if not files:
        print("‚ùå Aucun fichier image d√©tect√© dans le r√©pertoire courant.")
        return
    
    print(f"\nüìÅ Fichiers disponibles:")
    for i, file in enumerate(files, 1):
        print(f"  {i}. {file}")
    
    try:
        choice = int(input("\nüëâ Choisissez un fichier (num√©ro): ")) - 1
        if 0 <= choice < len(files):
            selected_file = files[choice]
            print(f"\nüîç Analyse de {selected_file}...")
            
            # Commande ExifTool pour extraire toutes les m√©tadonn√©es
            cmd = [
                'exiftool',
                '-charset', 'filename=utf8',
                '-charset', 'exiftool=utf8',
                '-a',  # Permet les tags dupliqu√©s
                '-G1',  # Affiche les groupes
                '-s',   # Format court
                selected_file
            ]
            
            result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                  encoding="utf-8", check=True)
            
            print("\n" + "="*80)
            print(f"üìã M√âTADONN√âES COMPL√àTES - {selected_file}")
            print("="*80)
            print(result.stdout)
            print("="*80)
            
        else:
            print("‚ùå Num√©ro de fichier invalide.")
            
    except ValueError:
        print("‚ùå Veuillez entrer un num√©ro valide.")
    except FileNotFoundError:
        print("‚ùå ExifTool non trouv√©. Veuillez l'installer.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur ExifTool: {e.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")

def view_useful_metadata():
    """
    Affiche une s√©lection de m√©tadonn√©es utiles pour un fichier image s√©lectionn√©.
    
    Cette fonction extrait et affiche les champs de m√©tadonn√©es les plus couramment utilis√©s
    dans un format structur√© et lisible.
    """
    print("\nüìä Visualisation des m√©tadonn√©es utiles...")
    
    files = get_image_files()
    
    if not files:
        print("‚ùå Aucun fichier image d√©tect√© dans le r√©pertoire courant.")
        return
    
    print(f"\nüìÅ Fichiers disponibles:")
    for i, file in enumerate(files, 1):
        print(f"  {i}. {file}")
    
    try:
        choice = int(input("\nüëâ Choisissez un fichier (num√©ro): ")) - 1
        if 0 <= choice < len(files):
            selected_file = files[choice]
            print(f"\nüîç Analyse de {selected_file}...")
            
            # Champs utiles √† extraire
            useful_fields = [
                'FileName', 'FileSize', 'MIMEType', 'ExifImageWidth', 'ExifImageHeight',
                'Make', 'Model', 'DateTime', 'DateTimeOriginal', 'CreateDate',
                'Artist', 'Creator', 'Copyright', 'Title', 'Description', 'Subject',
                'Keywords', 'Category', 'SupplementalCategories', 'Instructions',
                'SpecialInstructions', 'HierarchicalSubject', 'ColorSpace',
                'Orientation', 'XResolution', 'YResolution', 'Software'
            ]
            
            cmd = ['exiftool', '-charset', 'filename=utf8', '-charset', 'exiftool=utf8', '-j']
            for field in useful_fields:
                cmd.append(f'-{field}')
            cmd.append(selected_file)
            
            result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                  encoding="utf-8", check=True)
            
            data = json.loads(result.stdout)[0]
            
            print("\n" + "="*80)
            print(f"üìã M√âTADONN√âES UTILES - {selected_file}")
            print("="*80)
            
            # Informations de base
            print("\nüìÑ INFORMATIONS DE BASE:")
            print(f"  Nom du fichier: {data.get('FileName', 'N/A')}")
            print(f"  Taille: {data.get('FileSize', 'N/A')}")
            print(f"  Type MIME: {data.get('MIMEType', 'N/A')}")
            print(f"  Dimensions: {data.get('ExifImageWidth', 'N/A')} x {data.get('ExifImageHeight', 'N/A')}")
            
            # Informations techniques
            print("\nüîß INFORMATIONS TECHNIQUES:")
            print(f"  Appareil: {data.get('Make', 'N/A')} {data.get('Model', 'N/A')}")
            print(f"  Logiciel: {data.get('Software', 'N/A')}")
            print(f"  Orientation: {data.get('Orientation', 'N/A')}")
            print(f"  Espace colorim√©trique: {data.get('ColorSpace', 'N/A')}")
            print(f"  R√©solution: {data.get('XResolution', 'N/A')} x {data.get('YResolution', 'N/A')}")
            
            # Dates
            print("\nüìÖ DATES:")
            print(f"  Date de cr√©ation: {data.get('CreateDate', 'N/A')}")
            print(f"  Date originale: {data.get('DateTimeOriginal', 'N/A')}")
            print(f"  Date de modification: {data.get('DateTime', 'N/A')}")
            
            # M√©tadonn√©es descriptives
            print("\nüìù M√âTADONN√âES DESCRIPTIVES:")
            print(f"  Artiste/Cr√©ateur: {data.get('Artist', data.get('Creator', 'N/A'))}")
            print(f"  Copyright: {data.get('Copyright', 'N/A')}")
            print(f"  Titre: {data.get('Title', 'N/A')}")
            print(f"  Description: {data.get('Description', 'N/A')}")
            
            # Mots-cl√©s et cat√©gories
            print("\nüè∑Ô∏è MOTS-CL√âS ET CAT√âGORIES:")
            keywords = data.get('Subject', data.get('Keywords', []))
            if isinstance(keywords, list):
                print(f"  Mots-cl√©s: {', '.join(keywords) if keywords else 'N/A'}")
            else:
                print(f"  Mots-cl√©s: {keywords if keywords else 'N/A'}")
            print(f"  Cat√©gorie: {data.get('Category', 'N/A')}")
            print(f"  Cat√©gories suppl√©mentaires: {data.get('SupplementalCategories', 'N/A')}")
            print(f"  Sujets hi√©rarchiques: {data.get('HierarchicalSubject', 'N/A')}")
            
            # Instructions
            print("\nüìã INSTRUCTIONS:")
            print(f"  Instructions: {data.get('Instructions', 'N/A')}")
            print(f"  Instructions sp√©ciales: {data.get('SpecialInstructions', 'N/A')}")
            
            print("="*80)
            
        else:
            print("‚ùå Num√©ro de fichier invalide.")
            
    except ValueError:
        print("‚ùå Veuillez entrer un num√©ro valide.")
    except FileNotFoundError:
        print("‚ùå ExifTool non trouv√©. Veuillez l'installer.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur ExifTool: {e.stderr}")
    except json.JSONDecodeError:
        print("‚ùå Erreur de d√©codage JSON.")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")

def compare_metadata():
    """
    Compare les m√©tadonn√©es entre deux fichiers image.
    
    Cette fonction permet de comparer c√¥te √† c√¥te les m√©tadonn√©es de deux images
    pour identifier les diff√©rences et similitudes.
    """
    print("\nüîÑ Comparaison de m√©tadonn√©es...")
    
    files = get_image_files()
    
    if len(files) < 2:
        print("‚ùå Au moins 2 fichiers image sont n√©cessaires pour la comparaison.")
        return
    
    print(f"\nüìÅ Fichiers disponibles:")
    for i, file in enumerate(files, 1):
        print(f"  {i}. {file}")
    
    try:
        choice1 = int(input("\nüëâ Choisissez le premier fichier (num√©ro): ")) - 1
        choice2 = int(input("üëâ Choisissez le deuxi√®me fichier (num√©ro): ")) - 1
        
        if 0 <= choice1 < len(files) and 0 <= choice2 < len(files) and choice1 != choice2:
            file1, file2 = files[choice1], files[choice2]
            print(f"\nüîç Comparaison entre {file1} et {file2}...")
            
            # Extraction des m√©tadonn√©es pour les deux fichiers
            cmd_base = ['exiftool', '-charset', 'filename=utf8', '-charset', 'exiftool=utf8', '-j']
            
            result1 = subprocess.run(cmd_base + [file1], stdout=subprocess.PIPE, 
                                   stderr=subprocess.PIPE, encoding="utf-8", check=True)
            result2 = subprocess.run(cmd_base + [file2], stdout=subprocess.PIPE, 
                                   stderr=subprocess.PIPE, encoding="utf-8", check=True)
            
            data1 = json.loads(result1.stdout)[0]
            data2 = json.loads(result2.stdout)[0]
            
            # Comparaison
            all_keys = set(data1.keys()) | set(data2.keys())
            common_keys = set(data1.keys()) & set(data2.keys())
            
            print("\n" + "="*100)
            print(f"üìä COMPARAISON DE M√âTADONN√âES")
            print("="*100)
            print(f"Fichier 1: {file1}")
            print(f"Fichier 2: {file2}")
            print(f"\nChamps communs: {len(common_keys)}")
            print(f"Champs uniques au fichier 1: {len(set(data1.keys()) - set(data2.keys()))}")
            print(f"Champs uniques au fichier 2: {len(set(data2.keys()) - set(data1.keys()))}")
            
            print("\nüîç DIFF√âRENCES D√âTECT√âES:")
            differences_found = False
            for key in sorted(common_keys):
                val1, val2 = data1.get(key), data2.get(key)
                if val1 != val2:
                    differences_found = True
                    print(f"  {key}:")
                    print(f"    Fichier 1: {val1}")
                    print(f"    Fichier 2: {val2}")
            
            if not differences_found:
                print("  Aucune diff√©rence trouv√©e dans les champs communs.")
            
            print("="*100)
            
        else:
            print("‚ùå S√©lection invalide. Choisissez deux fichiers diff√©rents.")
            
    except ValueError:
        print("‚ùå Veuillez entrer des num√©ros valides.")
    except FileNotFoundError:
        print("‚ùå ExifTool non trouv√©. Veuillez l'installer.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur ExifTool: {e.stderr}")
    except json.JSONDecodeError:
        print("‚ùå Erreur de d√©codage JSON.")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")

def search_metadata():
    """
    Recherche des fichiers contenant une valeur sp√©cifique dans leurs m√©tadonn√©es.
    
    Cette fonction permet de rechercher tous les fichiers image qui contiennent
    une valeur particuli√®re dans n'importe quel champ de m√©tadonn√©es.
    """
    print("\nüîç Recherche dans les m√©tadonn√©es...")
    
    files = get_image_files()
    
    if not files:
        print("‚ùå Aucun fichier image d√©tect√© dans le r√©pertoire courant.")
        return
    
    search_term = input("\nüëâ Entrez le terme √† rechercher: ").strip()
    if not search_term:
        print("‚ùå Terme de recherche vide.")
        return
    
    print(f"\nüîç Recherche de '{search_term}' dans {len(files)} fichier(s)...")
    
    found_files = []
    
    try:
        for file in files:
            cmd = ['exiftool', '-charset', 'filename=utf8', '-charset', 'exiftool=utf8', '-j', file]
            result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                  encoding="utf-8", check=True)
            
            data = json.loads(result.stdout)[0]
            
            # Recherche dans toutes les valeurs
            for key, value in data.items():
                if isinstance(value, str) and search_term.lower() in value.lower():
                    found_files.append((file, key, value))
                    break
                elif isinstance(value, list):
                    for item in value:
                        if isinstance(item, str) and search_term.lower() in item.lower():
                            found_files.append((file, key, value))
                            break
        
        print("\n" + "="*80)
        print(f"üìã R√âSULTATS DE RECHERCHE POUR '{search_term}'")
        print("="*80)
        
        if found_files:
            for file, field, value in found_files:
                print(f"\nüìÑ {file}")
                print(f"  Champ: {field}")
                print(f"  Valeur: {value}")
        else:
            print("\nAucun r√©sultat trouv√©.")
        
        print("="*80)
        
    except FileNotFoundError:
        print("‚ùå ExifTool non trouv√©. Veuillez l'installer.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur ExifTool: {e.stderr}")
    except json.JSONDecodeError:
        print("‚ùå Erreur de d√©codage JSON.")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")

def display_menu():
    """
    Affiche le menu principal de l'application.
    """
    print("\n" + "="*60)
    print("üñºÔ∏è  GESTIONNAIRE DE M√âTADONN√âES D'IMAGES")
    print("="*60)
    print("1. üì§ Extraire les m√©tadonn√©es vers JSON")
    print("2. üßπ Nettoyer les m√©tadonn√©es en lot")
    print("3. ‚úçÔ∏è  √âcrire les informations d'auteur")
    print("4. üëÅÔ∏è  Voir toutes les m√©tadonn√©es d'un fichier")
    print("5. üìä Voir les m√©tadonn√©es utiles d'un fichier")
    print("6. üîÑ Comparer les m√©tadonn√©es de deux fichiers")
    print("7. üîç Rechercher dans les m√©tadonn√©es")
    print("8. üîß D√©boguer les champs de m√©tadonn√©es")
    print("9. ‚ùå Quitter")
    print("="*60)

def main():
    """
    Fonction principale qui g√®re le menu interactif et l'ex√©cution des diff√©rentes fonctionnalit√©s.
    
    Cette fonction pr√©sente un menu √† l'utilisateur et ex√©cute l'action choisie en boucle
    jusqu'√† ce que l'utilisateur d√©cide de quitter.
    """
    print("üéØ Bienvenue dans le gestionnaire de m√©tadonn√©es d'images!")
    print("üìã Ce script utilise ExifTool pour g√©rer les m√©tadonn√©es de vos images.")
    
    while True:
        display_menu()
        
        try:
            choice = input("\nüëâ Choisissez une option (1-9): ").strip()
            
            if choice == "1":
                extract_metadata()
            elif choice == "2":
                print("\n‚ö†Ô∏è  ATTENTION: Cette action va effacer d√©finitivement les m√©tadonn√©es sp√©cifi√©es.")
                confirm = input("√ätes-vous s√ªr de vouloir continuer? (oui/non): ").strip().lower()
                if confirm in ['oui', 'o', 'yes', 'y']:
                    clear_metadata_batch()
                else:
                    print("‚ùå Op√©ration annul√©e.")
            elif choice == "3":
                write_author_metadata()
            elif choice == "4":
                view_all_metadata()
            elif choice == "5":
                view_useful_metadata()
            elif choice == "6":
                compare_metadata()
            elif choice == "7":
                search_metadata()
            elif choice == "8":
                debug_metadata_fields()
            elif choice == "9":
                print("\nüëã Au revoir! Merci d'avoir utilis√© le gestionnaire de m√©tadonn√©es.")
                break
            else:
                print("‚ùå Option invalide. Veuillez choisir entre 1 et 9.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Interruption d√©tect√©e. Au revoir!")
            break
        except Exception as e:
            print(f"‚ùå Une erreur inattendue s'est produite: {e}")
        
        # Pause pour permettre √† l'utilisateur de lire les messages
        input("\nüìù Appuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    main()
