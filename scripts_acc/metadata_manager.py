#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Metadata Manager - Script pour g√©rer les m√©tadonn√©es d'images

Ce script permet de :
1. Extraire les m√©tadonn√©es d'images (JPG, JPEG, PNG) vers un fichier JSON
2. Appliquer les m√©tadonn√©es d'un fichier JSON aux images correspondantes

Auteur: Geoffroy Streit / Hylst
Date: 2024
"""

import json
import pathlib
import argparse
import sys
import os
from typing import Dict, List, Optional, Any
from PIL import Image as PILImage
from PIL.ExifTags import TAGS
import pyexiv2
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class MetadataManager:
    """Gestionnaire pour l'extraction et l'application de m√©tadonn√©es d'images"""
    
    def __init__(self, verbose: bool = False):
        """Initialise le gestionnaire de m√©tadonn√©es
        
        Args:
            verbose: Active le mode verbeux pour plus de logs
        """
        self.verbose = verbose
        self.supported_extensions = {'.jpg', '.jpeg', '.png'}
        
        if verbose:
            logger.setLevel(logging.DEBUG)
    
    def extract_metadata_from_directory(self, directory_path: str, output_file: str = None) -> bool:
        """Extrait les m√©tadonn√©es de toutes les images d'un r√©pertoire vers un fichier JSON
        
        Args:
            directory_path: Chemin du r√©pertoire contenant les images
            output_file: Chemin du fichier JSON de sortie (par d√©faut: metadata.json dans le r√©pertoire des images)
            
        Returns:
            True si l'extraction s'est bien pass√©e, False sinon
        """
        try:
            directory = pathlib.Path(directory_path)
            if not directory.exists() or not directory.is_dir():
                logger.error(f"‚ùå Le r√©pertoire {directory_path} n'existe pas ou n'est pas un dossier")
                return False
            
            # D√©finir le fichier de sortie par d√©faut dans le r√©pertoire des images
            if output_file is None:
                output_file = directory / "metadata.json"
            
            # Rechercher toutes les images support√©es (√©viter les doublons)
            image_files = set()
            for ext in self.supported_extensions:
                image_files.update(directory.glob(f"*{ext}"))
                image_files.update(directory.glob(f"*{ext.upper()}"))
            
            # Convertir en liste pour le traitement
            image_files = list(image_files)
            
            if not image_files:
                logger.warning(f"‚ö†Ô∏è Aucune image trouv√©e dans {directory_path}")
                return False
            
            logger.info(f"üìÅ Traitement de {len(image_files)} images dans {directory_path}")
            
            # Extraire les m√©tadonn√©es de chaque image
            metadata_collection = []
            for image_file in image_files:
                metadata = self._extract_single_image_metadata(image_file)
                if metadata:
                    metadata_collection.append(metadata)
            
            # Sauvegarder le JSON
            output_path = pathlib.Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(metadata_collection, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ M√©tadonn√©es extraites et sauvegard√©es dans {output_file}")
            logger.info(f"üìä {len(metadata_collection)} images trait√©es avec succ√®s")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'extraction des m√©tadonn√©es: {str(e)}")
            return False
    
    def _extract_single_image_metadata(self, image_path: pathlib.Path) -> Optional[Dict[str, Any]]:
        """Extrait les m√©tadonn√©es d'une seule image
        
        Args:
            image_path: Chemin vers l'image
            
        Returns:
            Dictionnaire contenant les m√©tadonn√©es ou None en cas d'erreur
        """
        try:
            if self.verbose:
                logger.debug(f"üîç Extraction m√©tadonn√©es: {image_path.name}")
            
            # Informations de base avec PIL
            with PILImage.open(image_path) as img:
                width, height = img.size
                file_size = image_path.stat().st_size
                
                # Formatage de la taille
                if file_size < 1024:
                    size_str = f"{file_size} B"
                elif file_size < 1024 * 1024:
                    size_str = f"{file_size / 1024:.0f} kB"
                else:
                    size_str = f"{file_size / (1024 * 1024):.1f} MB"
            
            # M√©tadonn√©es de base
            metadata = {
                "Fichier": image_path.name,
                "Taille": size_str,
                "Type": f"image/{image_path.suffix[1:].lower()}",
                "Largeur": width,
                "Hauteur": height,
                "Categorie": "",
                "Categorie secondaire": "",
                "Createur": "Geoffroy Streit / Hylst",
                "Description": "",
                "Mots cles": [],
                "Titre": "",
                "Caracteristiques": [],
                "Perception": "",
                "Conte": ""
            }
            
            # Tentative d'extraction des m√©tadonn√©es XMP/IPTC avec pyexiv2
            try:
                with pyexiv2.Image(str(image_path)) as img:
                    # Lecture XMP
                    try:
                        xmp_data = img.read_xmp()
                        if xmp_data:
                            # Titre
                            if 'Xmp.dc.title' in xmp_data:
                                title_data = xmp_data['Xmp.dc.title']
                                if isinstance(title_data, dict) and 'lang="x-default"' in title_data:
                                    metadata["Titre"] = title_data['lang="x-default"']
                                elif isinstance(title_data, str):
                                    metadata["Titre"] = title_data
                            
                            # Description
                            if 'Xmp.dc.description' in xmp_data:
                                desc_data = xmp_data['Xmp.dc.description']
                                if isinstance(desc_data, dict) and 'lang="x-default"' in desc_data:
                                    metadata["Description"] = desc_data['lang="x-default"']
                                elif isinstance(desc_data, str):
                                    metadata["Description"] = desc_data
                            
                            # Mots-cl√©s
                            if 'Xmp.dc.subject' in xmp_data:
                                keywords = xmp_data['Xmp.dc.subject']
                                if isinstance(keywords, list):
                                    metadata["Mots cles"] = keywords
                                    metadata["Caracteristiques"] = keywords.copy()
                            
                            # Cr√©ateur
                            if 'Xmp.dc.creator' in xmp_data:
                                creator_data = xmp_data['Xmp.dc.creator']
                                if isinstance(creator_data, list) and creator_data:
                                    metadata["Createur"] = creator_data[0]
                                elif isinstance(creator_data, str):
                                    metadata["Createur"] = creator_data
                            
                            # Perception (story)
                            if 'Xmp.photoshop.Instructions' in xmp_data:
                                metadata["Perception"] = xmp_data['Xmp.photoshop.Instructions']
                            
                            # Conte (comment)
                            if 'Xmp.dc.rights' in xmp_data:
                                metadata["Conte"] = xmp_data['Xmp.dc.rights']
                    
                    except Exception as xmp_error:
                        if self.verbose:
                            logger.debug(f"‚ö†Ô∏è Erreur lecture XMP pour {image_path.name}: {str(xmp_error)}")
                    
                    # Lecture IPTC
                    try:
                        iptc_data = img.read_iptc()
                        if iptc_data:
                            # Cat√©gorie
                            if 'Iptc.Application2.Category' in iptc_data:
                                metadata["Categorie"] = iptc_data['Iptc.Application2.Category']
                            
                            # Cat√©gorie secondaire
                            if 'Iptc.Application2.SuppCategory' in iptc_data:
                                metadata["Categorie secondaire"] = iptc_data['Iptc.Application2.SuppCategory']
                            
                            # Mots-cl√©s IPTC (compl√©ment)
                            if 'Iptc.Application2.Keywords' in iptc_data:
                                iptc_keywords = iptc_data['Iptc.Application2.Keywords']
                                if isinstance(iptc_keywords, list):
                                    # Fusionner avec les mots-cl√©s XMP
                                    all_keywords = list(set(metadata["Mots cles"] + iptc_keywords))
                                    metadata["Mots cles"] = all_keywords
                                    metadata["Caracteristiques"] = all_keywords.copy()
                    
                    except Exception as iptc_error:
                        if self.verbose:
                            logger.debug(f"‚ö†Ô∏è Erreur lecture IPTC pour {image_path.name}: {str(iptc_error)}")
            
            except Exception as pyexiv2_error:
                if self.verbose:
                    logger.debug(f"‚ö†Ô∏è Erreur pyexiv2 pour {image_path.name}: {str(pyexiv2_error)}")
            
            return metadata
            
        except Exception as e:
            logger.error(f"‚ùå Erreur extraction m√©tadonn√©es {image_path.name}: {str(e)}")
            return None
    
    def apply_metadata_from_json(self, json_file: str, target_directory: str) -> bool:
        """Applique les m√©tadonn√©es d'un fichier JSON aux images correspondantes
        
        Args:
            json_file: Chemin vers le fichier JSON contenant les m√©tadonn√©es
            target_directory: R√©pertoire contenant les images cibles
            
        Returns:
            True si l'application s'est bien pass√©e, False sinon
        """
        try:
            # V√©rifier l'existence du fichier JSON
            json_path = pathlib.Path(json_file)
            if not json_path.exists():
                logger.error(f"‚ùå Le fichier JSON {json_file} n'existe pas")
                return False
            
            # V√©rifier l'existence du r√©pertoire cible
            target_dir = pathlib.Path(target_directory)
            if not target_dir.exists() or not target_dir.is_dir():
                logger.error(f"‚ùå Le r√©pertoire cible {target_directory} n'existe pas")
                return False
            
            # Charger les m√©tadonn√©es JSON
            with open(json_path, 'r', encoding='utf-8') as f:
                metadata_list = json.load(f)
            
            if not isinstance(metadata_list, list):
                logger.error(f"‚ùå Le fichier JSON doit contenir une liste de m√©tadonn√©es")
                return False
            
            logger.info(f"üìÅ Application des m√©tadonn√©es √† {len(metadata_list)} images")
            
            success_count = 0
            error_count = 0
            
            # Appliquer les m√©tadonn√©es √† chaque image
            for metadata in metadata_list:
                if not isinstance(metadata, dict) or 'Fichier' not in metadata:
                    logger.warning(f"‚ö†Ô∏è M√©tadonn√©es invalides ignor√©es: {metadata}")
                    continue
                
                filename = metadata['Fichier']
                image_path = target_dir / filename
                
                if not image_path.exists():
                    logger.warning(f"‚ö†Ô∏è Image non trouv√©e: {filename}")
                    error_count += 1
                    continue
                
                if self._apply_single_image_metadata(image_path, metadata):
                    success_count += 1
                else:
                    error_count += 1
            
            logger.info(f"‚úÖ Application termin√©e: {success_count} succ√®s, {error_count} erreurs")
            return error_count == 0
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'application des m√©tadonn√©es: {str(e)}")
            return False
    
    def _apply_single_image_metadata(self, image_path: pathlib.Path, metadata: Dict[str, Any]) -> bool:
        """Applique les m√©tadonn√©es √† une seule image
        
        Args:
            image_path: Chemin vers l'image
            metadata: Dictionnaire contenant les m√©tadonn√©es √† appliquer
            
        Returns:
            True si l'application s'est bien pass√©e, False sinon
        """
        try:
            if self.verbose:
                logger.debug(f"üîß Application m√©tadonn√©es: {image_path.name}")
            
            # Description compl√®te (pour compatibilit√© avec l'ancien format)
            description_parts = []
            if metadata.get('Description'):
                description_parts.append(metadata['Description'])
            if metadata.get('Perception'):
                description_parts.append(metadata['Perception'])
            if metadata.get('Conte'):
                description_parts.append(metadata['Conte'])
            
            full_description = '\n\n'.join(description_parts) if description_parts else ''
            
            # Pr√©parer les m√©tadonn√©es XMP
            xmp_data = {}
            
            # Titre
            if metadata.get('Titre'):
                xmp_data['Xmp.dc.title'] = metadata['Titre']
            
            # Description compl√®te
            if full_description:
                xmp_data['Xmp.dc.description'] = full_description
            
            # Mots-cl√©s
            keywords = metadata.get('Mots cles', [])
            if keywords and isinstance(keywords, list):
                xmp_data['Xmp.dc.subject'] = keywords
            
            # Createur
            if metadata.get('Createur'):
                xmp_data['Xmp.dc.creator'] = [metadata['Createur']]
            
            # Pr√©parer les m√©tadonn√©es IPTC
            iptc_data = {}
            
            # Cat√©gorie
            if metadata.get('Categorie'):
                iptc_data['Iptc.Application2.Category'] = metadata['Categorie']
            
            # Cat√©gorie secondaire
            if metadata.get('Categorie secondaire'):
                iptc_data['Iptc.Application2.SuppCategory'] = metadata['Categorie secondaire']
            
            # Mots-cl√©s IPTC
            if keywords:
                iptc_data['Iptc.Application2.Keywords'] = keywords
            
            # Application avec gestion d'erreur robuste
            return self._write_metadata_robust(image_path, xmp_data, iptc_data)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur application m√©tadonn√©es {image_path.name}: {str(e)}")
            return False
    
    def _write_metadata_robust(self, image_path: pathlib.Path, xmp_data: Dict, iptc_data: Dict) -> bool:
        """√âcrit les m√©tadonn√©es avec gestion d'erreur robuste (similaire √† image_processor.py)
        
        Args:
            image_path: Chemin vers l'image
            xmp_data: Donn√©es XMP √† √©crire
            iptc_data: Donn√©es IPTC √† √©crire
            
        Returns:
            True si l'√©criture s'est bien pass√©e, False sinon
        """
        try:
            # Strat√©gie 1: √âcriture normale avec pyexiv2
            try:
                with pyexiv2.Image(str(image_path)) as img:
                    if xmp_data:
                        img.modify_xmp(xmp_data)
                    if iptc_data:
                        img.modify_iptc(iptc_data)
                
                if self.verbose:
                    logger.debug(f"‚úÖ M√©tadonn√©es √©crites (m√©thode normale): {image_path.name}")
                return True
                
            except Exception as e:
                if self.verbose:
                    logger.debug(f"‚ö†Ô∏è √âchec m√©thode normale pour {image_path.name}: {str(e)}")
                
                # Strat√©gie 2: Fallback avec nettoyage PIL
                return self._write_metadata_fallback(image_path, xmp_data, iptc_data)
        
        except Exception as e:
            logger.error(f"‚ùå Erreur compl√®te √©criture m√©tadonn√©es {image_path.name}: {str(e)}")
            return False
    
    def _write_metadata_fallback(self, image_path: pathlib.Path, xmp_data: Dict, iptc_data: Dict) -> bool:
        """M√©thode de fallback pour l'√©criture des m√©tadonn√©es
        
        Args:
            image_path: Chemin vers l'image
            xmp_data: Donn√©es XMP √† √©crire
            iptc_data: Donn√©es IPTC √† √©crire
            
        Returns:
            True si l'√©criture s'est bien pass√©e, False sinon
        """
        try:
            if image_path.suffix.lower() == '.png':
                return self._write_png_metadata_only(image_path, xmp_data)
            else:
                return self._write_jpg_metadata_simple(image_path, xmp_data, iptc_data)
        
        except Exception as e:
            logger.error(f"‚ùå Erreur fallback {image_path.name}: {str(e)}")
            return False
    
    def _write_png_metadata_only(self, image_path: pathlib.Path, xmp_data: Dict) -> bool:
        """√âcriture m√©tadonn√©es PNG avec PIL
        
        Args:
            image_path: Chemin vers l'image PNG
            xmp_data: Donn√©es XMP √† √©crire
            
        Returns:
            True si l'√©criture s'est bien pass√©e, False sinon
        """
        try:
            from PIL.PngImagePlugin import PngInfo
            
            with PILImage.open(image_path) as img:
                metadata = PngInfo()
                
                # Ajouter les m√©tadonn√©es comme texte PNG
                if 'Xmp.dc.title' in xmp_data:
                    metadata.add_text("Title", str(xmp_data['Xmp.dc.title']))
                
                if 'Xmp.dc.description' in xmp_data:
                    metadata.add_text("Description", str(xmp_data['Xmp.dc.description']))
                
                if 'Xmp.dc.subject' in xmp_data:
                    keywords = xmp_data['Xmp.dc.subject']
                    if isinstance(keywords, list):
                        metadata.add_text("Keywords", ", ".join(keywords))
                
                if 'Xmp.dc.creator' in xmp_data:
                    creator = xmp_data['Xmp.dc.creator']
                    if isinstance(creator, list) and creator:
                        metadata.add_text("Author", creator[0])
                    elif isinstance(creator, str):
                        metadata.add_text("Author", creator)
                
                # Sauvegarder avec m√©tadonn√©es
                img.save(image_path, pnginfo=metadata)
            
            if self.verbose:
                logger.debug(f"‚úÖ M√©tadonn√©es PNG √©crites: {image_path.name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur PNG fallback {image_path.name}: {str(e)}")
            return False
    
    def _write_jpg_metadata_simple(self, image_path: pathlib.Path, xmp_data: Dict, iptc_data: Dict) -> bool:
        """√âcriture m√©tadonn√©es JPG avec approche alternative
        
        Args:
            image_path: Chemin vers l'image JPG
            xmp_data: Donn√©es XMP √† √©crire
            iptc_data: Donn√©es IPTC √† √©crire
            
        Returns:
            True si l'√©criture s'est bien pass√©e, False sinon
        """
        try:
            import tempfile
            import shutil
            
            if self.verbose:
                logger.debug(f"üîß Utilisation de PIL pour contourner les EXIF corrompus")
            
            # Ouvrir l'image avec PIL (ignore les EXIF corrompus)
            with PILImage.open(image_path) as img:
                # Convertir en RGB si n√©cessaire
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                # Cr√©er un fichier temporaire
                with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                    temp_path = temp_file.name
                
                # Sauvegarder l'image sans les EXIF corrompus
                img.save(temp_path, 'JPEG', quality=95, optimize=True)
            
            # Maintenant essayer d'ajouter les m√©tadonn√©es XMP avec pyexiv2 sur l'image "propre"
            try:
                with pyexiv2.Image(temp_path) as clean_img:
                    if xmp_data:
                        clean_img.modify_xmp(xmp_data)
                    if iptc_data:
                        clean_img.modify_iptc(iptc_data)
                
                # Remplacer l'image originale par la version nettoy√©e avec m√©tadonn√©es
                shutil.move(temp_path, str(image_path))
                
                if self.verbose:
                    logger.debug(f"‚úÖ Image nettoy√©e et m√©tadonn√©es ajout√©es: {image_path.name}")
                
                return True
                
            except Exception as xmp_error:
                # Si m√™me l'image nettoy√©e √©choue, au moins on a une image sans EXIF corrompus
                shutil.move(temp_path, str(image_path))
                if self.verbose:
                    logger.debug(f"‚ö†Ô∏è Image nettoy√©e mais m√©tadonn√©es non ajout√©es: {str(xmp_error)}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur JPG fallback PIL {image_path.name}: {str(e)}")
            return False

def main():
    """Fonction principale du script"""
    parser = argparse.ArgumentParser(
        description="Gestionnaire de m√©tadonn√©es d'images - Extraction et application",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  # Extraire les m√©tadonn√©es d'un dossier vers JSON
  python metadata_manager.py extract ./images metadata.json
  
  # Appliquer les m√©tadonn√©es JSON aux images
  python metadata_manager.py apply metadata.json ./images
  
  # Mode verbeux
  python metadata_manager.py extract ./images metadata.json --verbose
        """
    )
    
    parser.add_argument(
        'action',
        choices=['extract', 'apply'],
        help='Action √† effectuer: extract (extraire vers JSON) ou apply (appliquer depuis JSON)'
    )
    
    parser.add_argument(
        'source',
        help='R√©pertoire source (pour extract) ou fichier JSON (pour apply)'
    )
    
    parser.add_argument(
        'target',
        help='Fichier JSON de sortie (pour extract) ou r√©pertoire cible (pour apply)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Active le mode verbeux'
    )
    
    args = parser.parse_args()
    
    # Cr√©er le gestionnaire de m√©tadonn√©es
    manager = MetadataManager(verbose=args.verbose)
    
    # Ex√©cuter l'action demand√©e
    if args.action == 'extract':
        logger.info(f"üîç Extraction des m√©tadonn√©es de {args.source} vers {args.target}")
        success = manager.extract_metadata_from_directory(args.source, args.target)
    else:  # apply
        logger.info(f"üìù Application des m√©tadonn√©es de {args.source} vers {args.target}")
        success = manager.apply_metadata_from_json(args.source, args.target)
    
    if success:
        logger.info("‚úÖ Op√©ration termin√©e avec succ√®s")
        sys.exit(0)
    else:
        logger.error("‚ùå Op√©ration √©chou√©e")
        sys.exit(1)

if __name__ == "__main__":
    main()